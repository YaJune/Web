//1.数组方法的作用
//2.参数
//3.方法的返回值
//4.原有的数组是否发生改变

//pop
    1.删除数组最后一项
    2.不需要传参
    3.返回值是删除的那一项
    4.原有数组发生改变
//push
    1.向数组的末尾新增一项或多项
    2.需要传参
    3.返回新数组的length
    4.原有数组发生改变
//shift
    1.删除数组第一项
    2.不需要传参
    3.返回值是删除的那一项
    4.原有数组发生改变
//unshift
    1.向数组的开头新增一项或多项
    2.需要传参
    3.返回新数组的length
    4.原有数组发生改变
//slice
    1.数组的截取，
    2.参数
        slice(m,n)  ：从索引m开始，截取到索引n；但是不包括n；
                     支持负数，让ary.length和负数运算再截取；
                     若m>n，返回值为空数组
        slice(m)    ：从索引m开始，截取到最后一项；
        slice()     ：克隆一份一模一样的数组；
        slice(-m,-n)：从索引[ary.length-m]开始，截取到索引[ary.length-n]；
    3.返回截取到的新数组，若m>n，返回值为空数组；
    4.原有数组不发生改变
//splice
    1.删除数组的某几项
    2.参数
        splice(m,n)     ： 从索引m开始删除n项；
                           m支持负数，让ary.length和负数运算再截取
                           n不支持负数；
        splice(m)       ： 从索引m开始删除到最后一项；
        splice(m,n,p...)： 替换；从索引m开始，删除n项，用p(可以多项)进行替换
                           若n=0；则是在索引m 前面 新增；
    3.返回被删除的几项组成的新数组
    4.原有数组发生改变
//sort
    1.排序
    2.参数
        不传参 ：只能对数组成员是相同位数的进行排序
        ary.sort(function(a,b){return a-b}) : 从小到大排序
        ary.sort(function(a,b){return b-a}) : 从大到小排序
    3.返回排序后的新数组
    4.原有数组发生改变
//reverse
    1.将数组成员颠倒
    2.不传参
    3.返回颠倒后的新数组
    4.原有数组发生改变
//indexOf
    1.检测数组成员在数组中第一次出现的索引位置
    2.需要检测的数组成员
    3.返回当前数组成员第一次出现对应的索引；如果校验的数组成员不存在，则返回-1；
    4.原有数组不发生改变
//lastIndexOf
    1.检测数组成员在数组中最后一次出现的索引位置
    2.需要检测的数组成员
    3.返回当前数组成员最后一次出现对应的索引；如果校验的数组成员不存在，则返回-1；
    4.原有数组不发生改变
//concat
    1.数组的拼接
    2.参数
        数组    ：把两个数组拼接到一起
        分开传递 ：把这几项新增到数组的末尾
        不传参   ：数组克隆一份
    3.返回连接后的新数组
    4.原有数组不发生改变
//join
    1.把数组的每一项按照特特定的字符连接成一个字符串
    2.需要参数,不传参数时用逗号隔开数组的每一项
    3.返回连接后的字符串
    4.原有数组不发生改变
//map
    1.映射，可以映射成一个新的数组；根据回调函数的返回值，组成新的数组
    2.需要参数
        ary.map(function (item,index,all) {
                // console.log(item);//数组的每一项
                // console.log(index);//数组成员的索引
                // console.log(all);//原数组
            });
    3.返回映射之后的新数组
    4.原有数组不发生改变
//forEach
    1.循环
    2.需要参数
        ary.forEach(function (item,index,all) {
                // console.log(item);//数组的每一项
                // console.log(index);//数组成员的索引
                // console.log(all);//原数组
            });
    3.没有return,返回值: undefined
    4.原有数组不发生改变
//toString
    1.将数组转成字符串
    2.不需要参数
    3.返回转换后的字符串
    4.原有数组不发生改变

